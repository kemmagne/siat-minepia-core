<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:jms="http://www.springframework.org/schema/jms" xmlns:amq="http://activemq.apache.org/schema/core"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="
	   http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
    	http://www.springframework.org/schema/tx 
    	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    	http://www.springframework.org/schema/util 
    	http://www.springframework.org/schema/util/spring-util-3.0.xsd
    	 http://www.springframework.org/schema/jms 
                           http://www.springframework.org/schema/jms/spring-jms.xsd
                           http://activemq.apache.org/schema/core 
                           http://activemq.apache.org/schema/core/activemq-core.xsd">


	<!-- For consider the using of annotations for defining Spring Bean -->
	<context:property-placeholder location="classpath:global-config.properties" />
	<context:annotation-config />
	<aop:aspectj-autoproxy />
	<!-- For defining Spring Bean -->
	<context:component-scan base-package="org.guce.siat.*" />

	<tx:annotation-driven />
	<context:annotation-config />
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.hsqldb.jdbcDriver" />
		<property name="url" value="jdbc:hsqldb:mem:test;" />
		<property name="username" value="sa" />
		<property name="password" value="sa" />
	</bean>

	<bean id="jpaAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="showSql" value="false" />
		<property name="generateDdl" value="true" />
		<property name="databasePlatform" value="org.hibernate.dialect.HSQLDialect" />
	</bean>

	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="persistenceUnitName" value="jpaData" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.HSQLDialect</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.enable_lazy_load_no_trans">true</prop>
			</props>
		</property>
		<!-- spring based scanning for entity classes -->
		<property name="packagesToScan">
			<list>
				<value>org.guce.siat.common.model</value>
				<value>org.guce.siat.core.ct.model</value>
				<value>org.guce.siat.core.gr.model</value>
			</list>
		</property>
	</bean>
	<jdbc:initialize-database data-source="dataSource" enabled="true">
		<jdbc:script location="classpath:./mode.sql" />
		<jdbc:script location="classpath:./init_test.sql" />
		<jdbc:script location="classpath:./init-workflow-test.sql" />
		<jdbc:script location="classpath:./sample_data_test.sql" />

	</jdbc:initialize-database>

	<!-- Hibernate transaction management -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- MAIL SETTINGS -->

	<bean id="velocityEngine" class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
		<property name="velocityProperties">
			<value>
				resource.loader=class
				class.resource.loader.class=org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader
			</value>
		</property>
	</bean>
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="defaultEncoding" value="UTF-8" />
		<property name="host" value="${mailSender.host}" />
		<property name="port" value="${mailSender.port}" />
		<property name="username" value="${mailSender.username}" />
		<property name="password" value="${mailSender.password}" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
			</props>
		</property>
	</bean>
	<bean id="templateMessage" class="org.springframework.mail.SimpleMailMessage">
		<property name="from" value="${mailSender.from}" />
		<property name="replyTo" value="${mailSender.replyTo}" />
	</bean>
	<!-- lets create an embedded ActiveMQ Broker -->
	<amq:broker id="broker" useJmx="false" persistent="false">
		<amq:transportConnectors>
			<amq:transportConnector uri="tcp://localhost:0" />
		</amq:transportConnectors>
	</amq:broker>
	<!-- ActiveMQ destinations to use -->
	<amq:queue id="destination" physicalName="org.guce.siat.mail" />
	<!-- JMS connection factory which connects to the broker using a VM transport. In this way the communication is made at JVM level 
		avoiding network overhead -->
	<amq:connectionFactory id="jmsFactory" brokerURL="vm://localhost" />
	<!-- JMS Producer Configuration -->
	<bean id="jmsProducerConnectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory" depends-on="broker"
		p:targetConnectionFactory-ref="jmsFactory" />
	<bean id="jmsProducerTemplate" class="org.springframework.jms.core.JmsTemplate" p:connectionFactory-ref="jmsProducerConnectionFactory"
		p:defaultDestination-ref="destination" />
	<!-- JMS Consumer Configuration -->
	<bean id="jmsConsumerConnectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory" depends-on="broker"
		p:targetConnectionFactory-ref="jmsFactory" />
	<jms:listener-container container-type="default" connection-factory="jmsConsumerConnectionFactory"
		acknowledge="auto">
		<jms:listener destination="org.guce.siat.mail" ref="jmsMailMessageListener" />
	</jms:listener-container>
	<!-- Counter for consumer to increment and test to verify count -->
	<bean id="counter" class="java.util.concurrent.atomic.AtomicInteger" />
	<bean id="emailSenderService" scope="prototype" class="org.guce.siat.common.mail.bo.VelocityEmailSenderServiceImpl">
		<constructor-arg index="0">
			<ref bean="velocityEngine"></ref>
		</constructor-arg>
		<constructor-arg index="1">
			<ref bean="mailSender"></ref>
		</constructor-arg>

		<constructor-arg index="2">
			<ref bean="templateMessage"></ref>
		</constructor-arg>
	</bean>
	
	<!-- ShaPasswordEncoder injected inside UserDaoImpl -->
	<bean class="org.springframework.security.authentication.encoding.ShaPasswordEncoder" id="encoder">
		<constructor-arg value="256" />
	</bean>
	<!-- MAIL SETTINGS -->
</beans>